WMA = c()
for (i in 1:length(cos)) {
acc = 0
for (j in 0:10) {
if (!is.null(cos[i-j])) {
acc <- acc + cos[i-j]*(10-j)
}
}
WMA[i] = acc/55
}
plot(motion$dates, WMA, type='l', col='blue', main="Accelerometer, WMA")
}
drawChart("Gyro", 5)
drawChart("Motion", 17)
motion = acc2[acc2[,2] == "Motion",]
motion = cbind(motion[,1], motion[,3:17])
motion[,1] = as.numeric(as.character(motion[,1]))
motion = motion[complete.cases(motion),]
motion[,1] = as.POSIXct(motion[,1], origin="1970-01-01")
colnames(motion)[1]<-"dates"
motion$magnitude = sqrt(as.numeric(motion[,2])^2+as.numeric(motion[,3])^2+as.numeric(motion[,4])^2)
motion = motion[motion[,1]>=motion[1,1],]
motion = motion[motion[,1]<=tail(motion[,1],1),]
motion = motion[order(motion$dates),]
m.binseg=cpt.mean(motion$magnitude, Q = 10, method='BinSeg',penalty='Manual',pen.value='1.5*log(n)')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Motion, BinSeg")
plot(motion$dates, motion$magnitude, type='l', col='green', main = "Motion")
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Motion, BinSeg")
plot(motion$dates, motion$magnitude, type='l', col='green', main = "Motion")
lines(motion$dates, sqrt(as.numeric(motion[,5])^2+as.numeric(motion[,6])^2+as.numeric(motion[,7])^2), type="l", col="green")
lines(motion$dates, sqrt(as.numeric(motion[,8])^2+as.numeric(motion[,9])^2+as.numeric(motion[,10])^2), type="l", col="blue")
lines(motion$dates, sqrt(as.numeric(motion[,11])^2+as.numeric(motion[,12])^2+as.numeric(motion[,13])^2), type="l", col="orange")
lines(motion$dates, sqrt(as.numeric(motion[,14])^2+as.numeric(motion[,15])^2+as.numeric(motion[,16])^2), type="l", col="yellow")
data <- read.table("http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_9p_5_flat.txt")
fit <- lm(V1~. -1, data=data)
summary(fit)$coef
plot(predict(fit), resid(fit), pch=".")
data <- read.table("http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_9p_5_flat.txt")
fit <- lm(V1~. -1, data=data)
summary(fit)$coef
plot(predict(fit), resid(fit), pch=".")
library(changepoint)
library(bigmemory)
acc2 <- as.data.frame(scan('~/Desktop/moves_protot/data3-9-3.csv',
what=list(date='', title='', t1='', t2='', t3='', t4='', t5='', t6='', t7='', t8='', t9='', t10='', t11='', t12='', t13='', t14='', t15='', t16='', t17='', t18='', t19=''),
sep=',', comment.char="", multi.line=F, fileEncoding="UTF-8", na.strings="",flush=T,fill=T))
sam = acc2[acc2[,2]=="Acceleration",][,3:5]#[seq(1, length(acc2[,1]), 10L),]
sam = sam[complete.cases(sam),]#[1:10000,]
dates = acc2[acc2[,2]=="Acceleration",][,1][complete.cases(sam)]#[1:10000]
time = as.POSIXct(as.numeric(dates), origin="1970-01-01")
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
data = data.frame(v1=as.numeric(sam[,1]), v2=as.numeric(sam[,2]), v3=as.numeric(sam[,3]))
data = data[complete.cases(data),]
data.pr = insertRow(data, rep(0,3), 1)
data = insertRow(data, rep(0,3), length(data[,1]))
cos = (data.pr[,1]*data[,1]+data.pr[,2]*data[,2]+data.pr[,3]*data[,3])/(sqrt(data[,1]^2+data[,2]^2+data[,3]^2)*sqrt(data.pr[,1]^2+data.pr[,2]^2+data.pr[,3]^2))
cos = cos[complete.cases(cos)]
head(cos)
WMA = c()
for (i in 1:length(cos)) {
acc = 0
for (j in 0:10) {
if (!is.null(cos[i-j])) {
acc <- acc + cos[i-j]*(10-j)
}
}
WMA[i] = acc/55
}
plot(WMA, type='l', col='blue', main="Accelerometer, WMA")
plot(fft(WMA))
head(fft(WMA))
head(WMA)
head(cos)
plot(fft(cos), type='l', col='blue')
plot(data)
plot(data[,1])
plot(fft(data[,1])
plot(fft(data[,1]))
plot(fft(data[,1]))
plot(fft(data[,1][1:700]))
plot(fft(data[,1][1:600]))
plot(fft(data[,1][1:500]))
plot(abs(fft(data[,1])))
plot(abs(fft(data[,1])), type='l')
plot(WMA, type='l', col='blue', main="Accelerometer, WMA")
m.binseg=cpt.mean(WMA[complete.cases(WMA)], Q = 10, method='BinSeg', penalty='Manual', pen.value='0.1*log(n)')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Accelerometer, BinSeg, WMA")
m.binseg=cpt.mean(cos, Q = 10, method='BinSeg', penalty='Manual', pen.value='1.5*log(n)')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Accelerometer, BinSeg, cosines btw vectors")
cpts(m.binseg)
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Accelerometer, BinSeg, WMA")
cpts(m.binseg)
m.binseg=cpt.mean(WMA[complete.cases(WMA)], Q = 10, method='BinSeg', penalty='Manual', pen.value='0.1*log(n)')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Accelerometer, BinSeg, WMA")
m.binseg=cpt.mean(WMA[complete.cases(WMA)], Q = 10, method='BinSeg', penalty='Manual', pen.value='0.01*log(n)')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Accelerometer, BinSeg, WMA")
?fft
acc2 <- as.data.frame(scan('~/Desktop/moves_protot/data.csv',
what=list(date='', title='', t1='', t2='', t3='', t4='', t5='', t6='', t7='', t8='', t9='', t10='', t11='', t12='', t13='', t14='', t15='', t16='', t17='', t18='', t19=''),
sep=',', comment.char="", multi.line=F, fileEncoding="UTF-8", na.strings="",flush=T,fill=T))
sam = acc2[acc2[,2]=="Acceleration",][,3:5]#[seq(1, length(acc2[,1]), 10L),]
sam = sam[complete.cases(sam),]#[1:10000,]
dates = acc2[acc2[,2]=="Acceleration",][,1][complete.cases(sam)]#[1:10000]
time = as.POSIXct(as.numeric(dates), origin="1970-01-01")
data = data.frame(v1=as.numeric(sam[,1]), v2=as.numeric(sam[,2]), v3=as.numeric(sam[,3]))
data = data[complete.cases(data),]
data.pr = insertRow(data, rep(0,3), 1)
data = insertRow(data, rep(0,3), length(data[,1]))
cos = (data.pr[,1]*data[,1]+data.pr[,2]*data[,2]+data.pr[,3]*data[,3])/(sqrt(data[,1]^2+data[,2]^2+data[,3]^2)*sqrt(data.pr[,1]^2+data.pr[,2]^2+data.pr[,3]^2))
cos = cos[complete.cases(cos)]
head(cos)
WMA = c()
for (i in 1:length(cos)) {
acc = 0
for (j in 0:10) {
if (!is.null(cos[i-j])) {
acc <- acc + cos[i-j]*(10-j)
}
}
WMA[i] = acc/55
}
plot(fft(cos), type='l', col='blue')
plot(WMA, type='l', col='blue', main="Accelerometer, WMA")
m.binseg=cpt.mean(WMA[complete.cases(WMA)], Q = 10, method='BinSeg', penalty='Manual', pen.value='0.01*log(n)')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Accelerometer, BinSeg, WMA")
cpts(m.binseg)
m.binseg=cpt.mean(cos, Q = 10, method='BinSeg', penalty='Manual', pen.value='1.5*log(n)')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Accelerometer, BinSeg, cosines btw vectors")
cpts(m.binseg)
gyro = acc2[acc2[,2]=="Gyro",][,3:5]
dategyro = acc2[acc2[,2]=="Gyro",][,1]
timegyro = as.POSIXct(as.numeric(dategyro), origin="1970-01-01")
gyro = gyro[complete.cases(gyro),]
gyro.magnitude = sqrt(as.numeric(gyro[,1])^2+as.numeric(gyro[,2])^2+as.numeric(gyro[,3])^2)
m.binseg=cpt.mean(gyro.magnitude, Q = 10, method='BinSeg')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Gyro, BinSeg")
cpts(m.binseg)
acc2 <- as.data.frame(scan('~/Desktop/moves_protot/data.csv',
what=list(date='', title='', t1='', t2='', t3='', t4='', t5='', t6='', t7='', t8='', t9='', t10='', t11='', t12='', t13='', t14='', t15='', t16='', t17='', t18='', t19=''),
sep=',', comment.char="", multi.line=F, fileEncoding="UTF-8", na.strings="",flush=T,fill=T))
sam = acc2[acc2[,2]=="Acceleration",][,3:5]#[seq(1, length(acc2[,1]), 10L),]
sam = sam[complete.cases(sam),]#[1:10000,]
dates = acc2[acc2[,2]=="Acceleration",][,1][complete.cases(sam)]#[1:10000]
time = as.POSIXct(as.numeric(dates), origin="1970-01-01")
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
data = data.frame(v1=as.numeric(sam[,1]), v2=as.numeric(sam[,2]), v3=as.numeric(sam[,3]))
data = data[complete.cases(data),]
data.pr = insertRow(data, rep(0,3), 1)
data = insertRow(data, rep(0,3), length(data[,1]))
cos = (data.pr[,1]*data[,1]+data.pr[,2]*data[,2]+data.pr[,3]*data[,3])/(sqrt(data[,1]^2+data[,2]^2+data[,3]^2)*sqrt(data.pr[,1]^2+data.pr[,2]^2+data.pr[,3]^2))
cos = cos[complete.cases(cos)]
head(cos)
WMA = c()
for (i in 1:length(cos)) {
acc = 0
for (j in 0:10) {
if (!is.null(cos[i-j])) {
acc <- acc + cos[i-j]*(10-j)
}
}
WMA[i] = acc/55
}
plot(fft(cos), type='l', col='blue')
plot(WMA, type='l', col='blue', main="Accelerometer, WMA")
m.binseg=cpt.mean(WMA[complete.cases(WMA)], Q = 10, method='BinSeg', penalty='Manual', pen.value='0.01*log(n)')
library(changepoint)
m.binseg=cpt.mean(WMA[complete.cases(WMA)], Q = 10, method='BinSeg', penalty='Manual', pen.value='0.01*log(n)')
plot(m.binseg, type='l', col='green', cpt.width=4, main = "Accelerometer, BinSeg, WMA")
?remove
save.image("~/Untitled.RData")
quit()
?rnorm
qnorm(0.25)
(1.96*300/25)^2
Ñ„ = 130
a = 130
s = 17
n = 35
xbar = 134
z <- (xbar-a)/(s/sqrt(n))
z
2*pnorm(-abs(z))
1100/15
1-0.259
1-0.997
1-926
1-0.926
a = 0.259*0.997
b = 0.741*0.074
a/(a+b)
147-128
mean(147,128)
mean(147,128)
?mean
mean(c(147,128))
?zscore
??zscore
a <- 9.51
s <- 4.65
n <- 40
xbar <- 10
z <- (xbar-a)/(s/sqrt(n))
z
2*pnorm(-abs(z))
a <- 10
s <- 4.65
n <- 40
xbar <- 9.51
z <- (xbar-a)/(s/sqrt(n))
z
2*pnorm(-abs(z))
1-0.09
1-0.02
0.09*0.9
0.91*0.02
0.09*0.9+0.91*0.02
(0.09*0.9)/(0.09*0.9+0.91*0.02)
med_ca = rep(0,100)
ca = c(-5,-4,-3,-2,1,7,10,11,17,18)
sample(10, ca)
sample(ca, 10)
all = cat(ca,pl)
all = c(ca,pl)
ca = c(-5,-4,-3,-2,1,7,10,11,17,18)
pl = c(-11, -5,-3,-3,-1,-1,-1,2,3,5,12)
all = cat(ca,pl)
all = c(ca,pl)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/p-value.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/p-value.R')
source('~/p-value.R', echo=TRUE)
11/100
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('Downloads/ShinyEd-master/CLT_mean')
install.packages(openintro"")
install.packages("openintro")
shiny::runApp('Downloads/ShinyEd-master/CLT_mean')
install.packages("gridExtra")
shiny::runApp('Downloads/ShinyEd-master/CLT_mean')
install.packages("BHH2")
shiny::runApp('Downloads/ShinyEd-master/CLT_mean')
ca = c(-5,-4,-3,-2,1,7,10,11,17,18)
pl = c(-11, -5,-3,-3,-1,-1,-1,2,3,5,12)
all = c(ca,pl)
median(all)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/ca.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('Downloads/ShinyEd-master/CLT_mean')
shiny::runApp('Downloads/ShinyEd-master/CLT_mean')
sqrt(500)
SQRT(150)
sqrt(150)
sqrt(1028)
1.96/32
0.04/0.06125
4/0.06
0.4/0.06
0.11-0.07
(0.11-0.07)/0.06
1.96*0.6666/32
shiny::runApp('Downloads/ShinyEd-master/CLT_mean')
load("/Users/asos/Downloads/statistics-project-gss.Rdata")
mosaicplot(table(a=gss$income06, b=gss$degree), col = gss$degree)
mosaicplot(table(gss$income06, gss$degree), col = gss$degree)
mosaicplot(table(gss$income06, gss$degree), col = TRUE)
mosaicplot(table(gss$income06, gss$degree), col = gss$degree)
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(gss$degree))[rank(gss$degree)])
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(gss$degree)))
mosaicplot(table(gss$income06, gss$degree), col = rainbow(levels(gss$degree)))
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))))
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))), dir = h)
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))), dir = c("h"))
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))))
mosaicplot(table(gss$income06, gss$degree, deparse.level = T), col = rainbow(length(levels(gss$degree))))
mosaicplot(table(gss$income06, gss$degree), col = TRUE)
mosaicplot(table(gss$income06, gss$degree, deparse.level = T), col = rainbow(length(levels(gss$degree))), margin = list(1:2, 3))
mosaicplot(table(gss$income06, gss$degree), col = TRUE,  las = 1)
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))))
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))), las = 1)
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))), las = 2)
table(a=gss$income06,b=gss$degree)
hist(table(a=gss$income06,b=gss$degree))
qqplot(gss$income06,gss$degree)
qqplot(gss$income06,gss$degree, plot.it = T)
summary(gss$income06,gss$degree)
summary( gss$income06)
hist(summary( gss$income06))
plot(summary( gss$income06))
mosaicplot(table(gss$age, gss$premarsx), col = rainbow(length(levels(gss$degree))), las = 2)
mosaicplot(table(gss$premarsx, gss$age), col = rainbow(length(levels(gss$degree))), las = 2)
mosaicplot(table(gss$age, gss$premarsx), col = rainbow(length(levels(gss$degree))), las = 2)
barplot(table(gss$age, gss$premarsx), col = rainbow(length(levels(gss$degree))), las = 2)
mosaicplot(table(gss$age, gss$premarsx), col = rainbow(length(levels(gss$degree))), las = 2)
> mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))), las = 2)
mosaicplot(table(gss$income06, gss$degree), col = rainbow(length(levels(gss$degree))), las = 2)
install.packages("compiler")
setwd("~/Desktop/moves_protot")
# library('changepoint')
# library('bigmemory')
library('plyr')
library("caret")
library("rpart")
library("rpart.plot")
library("tree")
library("randomForest")
library("e1071")
library("ggplot2")
library("RColorBrewer")
library("compiler")
readTestData <- function() {
filenames <- list.files("valid_data/test", pattern="*.csv", full.names=TRUE)
res <- lapply(filenames, read.motion.data)
res <- Reduce(rbind, res)
res.summary <- aggregateMotionData(res)
remove(filenames, res)
return(res.summary)
}
readTestData <- cmpfun(readTestData)
readTestData <- function() {
filenames <- list.files("valid_data/test", pattern="*.csv", full.names=TRUE)
res <- lapply(filenames, read.motion.data)
res <- Reduce(rbind, res)
res.summary <- aggregateMotionData(res)
remove(filenames, res)
return(res.summary)
}
read.motion.data <- function(path.to.file) {
acc <- as.data.frame(scan(path.to.file,
what=list(date='', sensorName='',
activityType='', motionDirection='', onBodyPosition='',
x="", y="", z="",
t4='', t5='', t6='',
t7='', t8='', t9='',
t10='', t11='', t12='',
t13='', t14='', t15='',
t16='', t17='', t18='', t19=''),
sep=',', comment.char="", multi.line=F, fileEncoding="UTF-8",
na.strings="", flush=T, fill=T))
acc$date = as.numeric(as.character(acc$date))
acc$date = as.POSIXct(acc$date, origin="1970-01-01")
colnames(acc)[1]<-"dates"
acc
}
aggregateMotionData <- function(res) {
sec <- cut(res$date, breaks='sec')
res <- cbind(res, sec=sec)
res <- rbind(res[res$sensorName == "Acceleration",], res[res$sensorName == "Gyro",], res[res$sensorName == "Gyroscope",])
#counting magnitude
res$magnitude = sqrt(as.numeric(res$x)^2+as.numeric(res$y)^2+as.numeric(res$z)^2)
#counting table of predictors
res.summary <- ddply(res, ~sec+sensorName, summarise,
activity.type=names(sort(summary(activityType), decreasing = T)[1])[1],
mean=mean(magnitude), sd=sd(magnitude),
max=max(magnitude), min=min(magnitude),
fft.max=max(abs(fft(magnitude)))
)
acc <-res.summary[res.summary$sensorName == "Acceleration",]
names(acc)[4:8] <- paste(names(acc)[4:8], "_acc", sep="")
gyro <- res.summary[res.summary$sensorName == "Gyroscope",]
names(gyro)[4:8] <- paste(names(gyro)[4:8], "_gyro", sep="")
gyro <- cbind(sec=gyro[,1],gyro[,4:8])
res.summary <- merge(x = acc, y = gyro, by = "sec", all = TRUE)
remove(acc, gyro)
res.summary$sensorName <- as.factor(res.summary$sensorName)
res.summary$activity.type <- as.factor(res.summary$activity.type)
#   res.summary$motion.direction <- as.factor(res.summary$motion.direction)
#   res.summary$on.body.position <- as.factor(res.summary$on.body.position)
res.summary <- res.summary[complete.cases(res.summary),]
return(res.summary)
}
drawChart <- function(data, sensorName = "Acceleration", complete.cases = F) {
sensor.data = data[data$sensorName == sensorName,]
sensor.data = cbind(sensor.data[,1], sensor.data[,3:8])
if (complete.cases) {
sensor.data = sensor.data[complete.cases(sensor.data),]
}
sensor.data$magnitude = sqrt(as.numeric(sensor.data$x)^2+as.numeric(sensor.data$y)^2+as.numeric(sensor.data$z)^2)
sensor.data = sensor.data[sensor.data[,1]>=sensor.data[1,1],]
sensor.data = sensor.data[sensor.data[,1]<=tail(sensor.data[,1],1),]
sensor.data = sensor.data[order(sensor.data$dates),]
#   m.binseg=cpt.mean(sensor.data$magnitude, Q = 10, method='BinSeg',penalty='Manual',pen.value='1.5*log(n)')
#   plot(m.binseg, type='l', col=sensor.data$activityType, cpt.width=4, main = "Acceleration, BinSeg")
plot(sensor.data$dates, sensor.data$magnitude, col=sensor.data$activityType, main = names(table(ldf[[i]]$activityType))[1])
lines(sensor.data$dates, sensor.data$magnitude, col='green')
}
readTestData <- cmpfun(readTestData)
read.motion.data <- cmpfun(read.motion.data)
aggregateMotionData <- cmpfun(aggregateMotionData)
drawChart <- cmpfun(drawChart)
disassemble(drawChart)
filenames <- list.files("valid_data/train", pattern="*.csv", full.names=TRUE)
res <- lapply(filenames, read.motion.data)
res <- Reduce(rbind, res)
res.summary <- aggregateMotionData(res)
library('changepoint')
install.packages("changepoint", "bigmemory", "plyr")
?install.packages
install.packages(c("changepoint", "bigmemory", "plyr"))
install.packages(c("caret", "rpart", "rpart.plot", "tree", "randomForest", "e1071", "ggplot2", "RColorBrewer", "compiler", "tuneR"))
